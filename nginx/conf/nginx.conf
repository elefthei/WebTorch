# One worker per CPU core
worker_processes auto;

events {
    worker_connections  1024;
}

http {
    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path ";;/opt/nginx/lib/?.lbjc;";
    # Set thread shared dict memory to 10MB
    lua_shared_dict global 10m;
    init_by_lua_file lib/init.lbjc;
 
    server {
        # WebTorch listens on 3000 by default
        listen 3000;

        # stdout logging for docker
        access_log     /dev/stdout combined;
        error_log      /dev/stderr debug;

        # Print LuaJIT version (not compatible with pure Lua)
        location = /lua {
            default_type text/plain;
            content_by_lua '
                if jit then
                    ngx.say(jit.version)
                else
                     ngx.say("Not LuaJIT!")
                end
            ';
        }

        # Issues a synchronous but still non-blocking Nginx Subrequest
        location /v1/train {
            content_by_lua '
                ngx.req.read_body()  -- explicitly read the req body
                res = ngx.location.capture (
                    "/v1/impl/train", {method = ngx.HTTP_POST, always_forward_body = true})
                if res then
                    ngx.status = res.status
                    ngx.say(res.body)
                    ngx.exit(res.status)
                end
        ';
        }

        # Issues a synchronous but still non-blocking Nginx Subrequest
        location /v1/output {
            content_by_lua '
                ngx.req.read_body()  -- explicitly read the req body
                res = ngx.location.capture (
                    "/v1/impl/output", {method = ngx.HTTP_POST, always_forward_body = true, copy_all_vars = true})
                if res then
                    ngx.status = res.status
                    ngx.say(res.body)
                    ngx.exit(res.status)
                end
        ';
        }

        # Blocking endpoint
        location = /v1/impl/train {
            content_by_lua_file lib/train.lbjc;
        }

        # Blocking endpoint
        location = /v1/impl/output {
            content_by_lua_file lib/output.lbjc;
        }
    }
}
